openapi: 3.0.3
info:
  title: Ricerca Parcheggio Efficace - OpenAPI 3.0
  description:
    Questa API consente di interagire con il servizio Ricerca Parcheggio Efficace per sfruttare le sue funzionalit√†.
  version: 0.0.1
paths:
  /v1/parcheggio:
    post:
      summary: Aggiunta parcheggio
      description: Viene aggiunto un nuovo parcheggio con i campi inviati
      operationId: postParcheggio
      tags: 
        - parcheggi
      security:
        - BearerAuth: [admin]
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - oneOf:
                  - $ref: '#/components/schemas/ParcheggioFreeDiscoPostReqSchema'
                  - $ref: '#/components/schemas/ParcheggioFreePostReqSchema' 
                  discriminator:
                    propertyName: isDisco
                - $ref: '#/components/schemas/ParcheggioPayReqSchema'
                - $ref: '#/components/schemas/ParcheggioVigilatoReqSchema'
              discriminator:
                propertyName: _type
            examples:
                free:
                  summary: esempio parcheggio gratuito senza disco orario
                  value: {
                          "_type": "ParcheggioFree",
                          "nome": "p1",
                          "posizione":{
                            "type": "Point",
                            "coordinates": [11, 14]
                          },
                          "numPosti": 23,
                          "isCoperto": true,
                          "statoParcheggio": "Non disponibile",
                          "numPostiDisabili": 2,
                          "numPostiGravidanza": 0,
                          "numPostiAuto": 15,
                          "numPostiMoto": 6,
                          "numPostiFurgone": 0,
                          "numPostiBus": 0,
                          "isDisco": false
                        }
                freeDisco:
                  summary: esempio parcheggio gratuito con disco orario
                  value: {
                          "_type": "ParcheggioFree",
                          "nome": "p2",
                          "posizione": {
                            "type": "Point",
                            "coordinates": [9, 4]
                          },
                          "numPosti": 23,
                          "isCoperto": false,
                          "statoParcheggio": "Non disponibile",
                          "numPostiDisabili": 2,
                          "numPostiGravidanza": 0,
                          "numPostiAuto": 15,
                          "numPostiMoto": 6,
                          "numPostiFurgone": 0,
                          "numPostiBus": 0,
                          "isDisco": true,
                          "dataInizio": "13:35",
                          "dataFine": "16:35"
                        }
                pay:
                  summary: esempio parcheggio a pagamento
                  value: {
                          "_type": "ParcheggioPay",
                          "nome": "p3",
                          "posizione":{
                            "type": "Point",
                            "coordinates": [24, 1]
                          },
                          "numPosti": 23,
                          "isCoperto": false,
                          "statoParcheggio": "Non disponibile",
                          "numPostiDisabili": 2,
                          "numPostiGravidanza": 1,
                          "numPostiAuto": 13,
                          "numPostiMoto": 6,
                          "numPostiFurgone": 1,
                          "numPostiBus": 0,
                          "tariffa": 1.20
                        }
                vigilato:
                  summary: esempio parcheggio vigilato
                  value: {
                        "_type": "ParcheggioVigilato",
                        "nome": "p4",
                        "posizione":{
                          "type": "Point",
                          "coordinates": [0, 0]
                        },
                        "numPosti": 30,
                        "isCoperto": true,
                        "statoParcheggio": "Non disponibile",
                        "numPostiDisabili": 2,
                        "numPostiGravidanza": 0,
                        "numPostiAuto": 15,
                        "numPostiMoto": 6,
                        "numPostiFurgone": 0,
                        "numPostiBus": 7,
                        "postiOccupati": {
                          "postiOcc": 10,
                          "postiOccDisabili": 1,
                          "postiOccGravidanza": 0,
                          "postiOccAuto": 6,
                          "postiOccMoto": 2,
                          "postiOccFurgone": 0,
                          "postiOccBus": 1
                        },
                        "tariffa": 2.50
                      }
      responses:
        '201':
          $ref: "#/components/responses/PostSuccessfulRes"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
    get:
      summary: Richiesta lista parcheggi
      description: Ritorna la lista di tutti i parcheggi
      operationId: getAllParcheggi
      tags: 
        - parcheggi
      responses:
        '200':
          $ref: '#/components/responses/GetAllSuccessfulRes'
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
  /v1/parcheggio/:{parcheggioId}:
    get:
      summary: Ricezione info parcheggio specifico
      description: Ritorna un parcheggio dato un ID
      operationId: getParcheggioById
      tags: 
        - parcheggi
      parameters:
        - $ref: "#/components/parameters/parcheggioId" 
      responses:
        '200': 
          $ref: '#/components/responses/GetParcheggioSuccessfulRes'
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
    patch:
      summary: Modifica parcheggio
      description: Modifica un parcheggio dato un ID
      operationId: modifyParcheggioById
      tags: 
        - parcheggi
      security:
        - BearerAuth: [admin]
      parameters:
        - $ref: "#/components/parameters/parcheggioId" 
      requestBody:
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/ParcheggioPatchReqSchema"
      responses:
        '200':
          $ref: '#/components/responses/PatchSuccessfulRes'
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
    delete:
      summary: Cancellazione parcheggio
      description: Cancella un parcheggio dato un ID
      operationId: deleteParcheggioById
      tags: 
        - parcheggi
      security:
        - BearerAuth: [admin]
      parameters:
        - $ref: "#/components/parameters/parcheggioId" 
      responses:
        '200':
          $ref: '#/components/responses/DeleteSuccessfulRes'
        '4XX': 
          $ref: "#/components/responses/GeneralError"
  /v1/parcheggio/ricerca:
    get:
      summary: Ricerca dei parcheggi vicini alla meta
      description: Ricerca dei parcheggi vicini alla meta selezionata
      operationId: ricercaParcheggiVicini
      tags: 
        - ricerca
      parameters: 
        - name: lon
          in: query
          description: Longitudine selezionata
          required: true
          schema:
            type: number
        - name: lat
          in: query
          description: Latitudine selezionata
          required: true
          schema:
            type: number
        - name: isCoperto
          in: query
          description: Indica la preferenza tra parcheggio coperto o meno
          required: true
          schema:
            type: boolean
        - name: utente
          in: query
          description: Indica la preferenza sulla presenza di posti per disabili o posti per donne in gravidanza
          required: false
          schema:
            type: string
            enum: 
              - disabili
              - gravidanza
        - name: veicolo
          in: query
          description: Indica la preferenza sulla presenza di posti per per auto, moto, furgoni o bus
          required: false
          schema:
            type: string
            enum: 
              - auto
              - moto
              - furgoni
              - bus
      responses:
        '200':
          $ref: '#/components/responses/RicercaParcheggiViciniSuccessfulRes'
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
  /v1/utente/:
    post:
      summary: Registrazione di un utente nel sistema
      description: Registra un nuovo utente nel sistema
      operationId: register
      tags:
        - utente
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/UtenteAdminSchemaReg"
              - $ref: "#/components/schemas/UtenteNormaleSchemaReg"
      responses:
        '201':
          $ref: "#/components/responses/RegistraUtenteRes"
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
  /v1/token/:
    post:
      summary: Autenticazione di un utente nel sistema
      description: Autentica un nuovo utente nel sistema
      operationId: login
      tags:
        - utente
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UtenteSchemaLog"
      responses:
        '200':
          $ref: "#/components/responses/LoginUtenteRes"
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
  /v1/prenotazione/:
    post:
      summary: Prenotazione di un parcheggio
      description: Prenota un parcheggio 
      operationId: prenotazioneParcheggio 
      tags:
      - prenotazione
      security:
        - BearerAuth: [utente]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostPrenotazioneParcheggio"
      responses:
        '200':
          $ref: "#/components/responses/PostPrenotazioneParcheggio"
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError" 
    get: 
      summary: Visualizza prenotazione dato un utente
      description: Visualizza una prenotazione dato un utente
      operationId: visualizzazionePrenotazione
      tags:
        - prenotazione
      security:
        - BearerAuth: [utente]
      responses:
        '200':
          $ref: "#/components/responses/GetPrenotazioneParcheggio"
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"

  /v1/parcheggio/:{parcheggioId}/prenotazione:
    get: 
      summary: Visualizza prenotazione dato un parcheggio
      description: Visualizza una prenotazione dato un parcheggio
      operationId: visualizzazionePrenotazioneParcheggio
      tags:
      - prenotazione
      security:
        - BearerAuth: [admin]
      parameters:
        - $ref: "#/components/parameters/parcheggioId"
      responses:
        '200':
          $ref: "#/components/responses/GetPrenotazioneParcheggio"
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"


  /v1/prenotazione/:{prenotazioneId}/arrivo:
    patch:
      summary: Modifica campo isArrived della prenotazione 
      description: Modifica campo isArrived della prenotazione
      operationId: modificaPrenotazione
      tags:
      - prenotazione
      security:
        - BearerAuth: [admin]
      parameters:
        - $ref: "#/components/parameters/prenotazioneId"
      responses:
        '200':
          $ref: "#/components/responses/PatchPrenotazione"
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
    

  /v1/prenotazione/:{prenotazioneId}:
    delete:
      summary: Elimina prenotazione 
      description: Elimina prenotazione
      operationId: eliminaPrenotazione
      tags:
      - prenotazione
      security:
        - BearerAuth: [utente]
      parameters:
        - $ref: "#/components/parameters/prenotazioneId"
      responses:
        '200':
          $ref: "#/components/responses/DeletePrenotazione"
        '4XX': 
          $ref: "#/components/responses/GeneralError"
        '5XX': 
          $ref: "#/components/responses/GeneralError"
    
  /v1/feedback:
    post:
      summary: Scrivi feedback
      description: L'utente autenticato pu√≤ scrivere un feedback su un parcheggio
      operationId: scriviFeedback
      tags:
      - feedback
      security:
        - BearerAuth: [utente]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackPostReqSchema"
      responses:
        '201':
          $ref: "#/components/responses/FeedbackPostRes"
        '4XX':
          $ref: "#/components/responses/GeneralError"
        '5XX':
          $ref: "#/components/responses/GeneralError"
    get:
      summary: Visualizza feedback di un utente
      description: L'utente autenticato pu√≤ visualizzare i propri feedback
      operationId: visualizzaFeedbackUtente
      tags:
        - feedback
      security:
        - BearerAuth: [utente]
      responses:
        '200':
          $ref: "#/components/responses/FeedbackGetRes"
        '4XX':
          $ref: "#/components/responses/GeneralError"
        '5XX':
          $ref: "#/components/responses/GeneralError"
  
  /v1/parcheggio/:{parcheggioId}/feedback:
    get:
      summary: Visualizza feedback di un parcheggio
      description: L'utente pu√≤ visualizzare i feedback di un parcheggio
      operationId: visualizzaFeedbackParcheggio
      tags:
        - feedback
      parameters:
        - $ref: "#/components/parameters/parcheggioId"
      responses:
        '200':
          $ref: "#/components/responses/FeedbackGetRes"
        '4XX':
          $ref: "#/components/responses/GeneralError"
        '5XX':
          $ref: "#/components/responses/GeneralError"

      

components:
  parameters:
    prenotazioneId:
        name: prenotazioneId
        in: path
        description: ID della prenotazione
        required: true
        schema:
          type: string 
    parcheggioId:
        name: parcheggioId
        in: path
        description: ID del parcheggio
        required: true
        schema:
          type: string 
  schemas:
    PostPrenotazioneParcheggio:
      type: object
      required:
        - parcheggioId
        - tipoPosto
      properties:
        parcheggioId:
          type: string
        tipoPosto:
          type: string
    ParcheggioSchema:
      type: object
      required:
        - _type
        - nome
        - posizione
        - numPosti
        - isCoperto
        - statoParcheggio
        - numPostiDisabili
        - numPostiGravidanza
        - numPostiAuto
        - numPostiMoto
        - numPostiFurgone
        - numPostiBus
      properties:
        _type:
          type: string
        nome:
          type: string
        posizione:
          type: object
          properties:
            type:
              type: string
              enum:
              - Point
            coordinates:
              type: array
              minItems: 2
              maxItems: 2
              items:
                type: number
        numPosti:  
          type: integer
        isCoperto:
          type: boolean
        statoParcheggio:
          type: string
          enum:
          - Disponibile
          - Non disponibile
        numPostiDisabili: 
          type: integer
        numPostiGravidanza:
          type: integer
        numPostiAuto:
          type: integer
        numPostiMoto: 
          type: integer
        numPostiFurgone:
          type: integer
        numPostiBus:
          type: integer
    ParcheggioFreeSchema:
      allOf:
      - $ref: '#/components/schemas/ParcheggioSchema'
      - type: object
        required:
          - _id
          - isDisco
          - dataInizio
          - dataFine
        properties:
          _id:
            type: string
          isDisco:
            type: boolean
          dataInizio:
            type: string
          dataFine:
            type: string
    ParcheggioPaySchema:
      allOf:
        - $ref: '#/components/schemas/ParcheggioSchema'
        - type: object
          required:
            - _id
            - tariffa
          properties:
            _id:
              type: string
            tariffa:
              type: number
    ParcheggioVigilatoSchema:
      allOf:
        - $ref: '#/components/schemas/ParcheggioSchema'
        - type: object
          required:
            - _id
            - tariffa
            - postiOccupati
          properties:
            _id:
              type: string
            tariffa:
              type: number
            postiOccupati:
              type: object
              required:
                - postiOcc
                - postiOccDisabili
                - postiOccGravidanza
                - postiOccAuto
                - postiOccMoto
                - postiOccFurgone
                - postiOccBus
              properties:
                postiOcc:
                  type: integer
                postiOccDisabili:
                  type: integer
                postiOccGravidanza:
                  type: integer
                postiOccAuto:
                  type: integer
                postiOccMoto:
                  type: integer
                postiOccFurgone:
                  type: integer
                postiOccBus:
                  type: integer
    ParcheggioFreeDiscoPostReqSchema:
      allOf:
        - $ref: '#/components/schemas/ParcheggioSchema'
        - type: object
          required:
            - isDisco
            - dataInizio
            - dataFine
          properties:
            isDisco:
              type: boolean
              enum:
              - true
            dataInizio:
              type: string
            dataFine:
              type: string
    ParcheggioFreePostReqSchema:
      allOf:
        - $ref: '#/components/schemas/ParcheggioSchema'
        - type: object
          required:
            - isDisco
          properties:
            isDisco:
              type: boolean
              enum:
              - false
    ParcheggioPayReqSchema:
      allOf:
        - $ref: '#/components/schemas/ParcheggioSchema'
        - type: object
          required:
            - tariffa
          properties:
            tariffa:
              type: number
    ParcheggioVigilatoReqSchema:
      allOf:
        - $ref: '#/components/schemas/ParcheggioSchema'
        - type: object
          required:
            - postiOccupati
            - tariffa
          properties:
            postiOccupati:
              type: object
              required:
                - postiOcc
                - postiOccDisabili
                - postiOccGravidanza
                - postiOccAuto
                - postiOccMoto
                - postiOccFurgone
                - postiOccBus
              properties:
                postiOcc:
                  type: integer
                postiOccDisabili:
                  type: integer
                postiOccGravidanza:
                  type: integer
                postiOccAuto:
                  type: integer
                postiOccMoto:
                  type: integer
                postiOccFurgone:
                  type: integer
                postiOccBus:
                  type: integer
            tariffa:
              type: number
    ParcheggioPatchReqSchema:
      type: object
      properties:
        propName:
          type: string
          enum:
          - nome
          - posizione
          - numPosti
          - isCoperto
          - statoParcheggio
          - numPostiDisabili
          - numPostiGravidanza
          - numPostiAuto
          - numPostiMoto
          - numPostiFurgone
          - numPostiBus
          - isDisco
          - dataInizio
          - dataFine
          - tariffa
          - postiOccupati
        value:
          oneOf:
            - type: string
            - type: integer
            - type: number
            - type: boolean
            - type: object
              properties:
                type:
                  type: string
                  enum:
                  - Point
                coordinates:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: number
            - type: string
              enum:
              - Disponibile
              - Non disponibile
    ParcheggioShortResSchema:
      type: object
      required:
        - _id
        - _type
        - nome
        - request
      properties:
        _id:
          type: string
        _type:
          type: string
        nome:
          type: string
        request:
          type: object
          required:
            - type
            - url
          properties:
            type:
              type: string
              enum:
              - GET
            url:
              type: string
    ParcheggioPatchResSchema:
      type: object
      required:
        - message
        - modifiedParcheggio
      properties:
        message:
          type: string
        modifiedParcheggio:
          type: object
          required:
            - _id
            - _type
            - request
          properties:
            _id:
              type: string
            _type:
              type: string
            request:
              type: object
              required:
                - type
                - url
              properties:
                type:
                  type: string
                  enum:
                  - GET
                url:
                  type: string
    ParcheggioPostResSchema:
      type: object
      required:
        - message
        - createdParcheggio
      properties:
        message:
          type: string
        createdParcheggio:
          $ref: '#/components/schemas/ParcheggioShortResSchema'
    ParcheggioDeleteResSchema:
      type: object
      required:
        - message
        - deletedParcheggio
      properties:
        message:
          type: string
        deletedParcheggio:
          $ref: '#/components/schemas/ParcheggioShortResSchema'
    GetParcheggiResSchema:
      type: object
      required: 
       - count
       - parcheggi
      properties:
        count:
          type: integer
        parcheggi:
          type: array
          items:
            $ref: '#/components/schemas/ParcheggioShortResSchema'
    GetParcheggioResSchema:
      oneOf:
        - $ref: '#/components/schemas/ParcheggioFreeSchema'
        - $ref: '#/components/schemas/ParcheggioPaySchema'
        - $ref: '#/components/schemas/ParcheggioVigilatoSchema'
      discriminator:
        propertyName: _type
    GeneralErrorSchema:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    VeicoloSchema:
      type: object
      required:
        - tipoVeicolo
        - targa
      properties:
        tipoVeicolo:
          type: string
          enum:
            - "auto"
            - "moto"
            - "furgone"
            - "bus"
        targa:
          type: string
    UtenteAdminSchemaReg:
      type: object
      required:
        - _type
        - email
        - password
      properties:
        _type: 
          type: string
          enum:
            - "UtenteAdmin"
        email:
          type: string
        password:
          type: string
    UtenteNormaleSchemaReg:
      type: object
      required:
        - _type
        - email
        - password
        - metPagamento
        - veicoli
      properties:
        _type: 
          type: string
          enum:
            - "UtenteNormale"
        email:
          type: string
        password:
          type: string
        metPagamento:
          type: string
          enum:
            - "carta di credito"
            - "carta di debito"
            - "paypal"
        veicoli:
          type: array
          items:
            $ref: "#/components/schemas/VeicoloSchema" 
    UtenteSchemaLog:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    FeedbackPostReqSchema:
      type: object
      required:
        - parcheggioId
        - rating
        - testoFeedback
      properties:
        parcheggioId:
          type: string
        rating:
          type: integer
        testoFeedback:
          type: string
          maxLength: 300
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  responses:
    PatchPrenotazione:
      description: ""
      content:
        application/json:
          schema:
            type: object
            required:
              - message
              - modifiedPrenotazione
            properties:
              message:
                type: string
              modifiedPrenotazione:
                type: object
                required:
                  - _id
                  - isArrived
                properties:
                  _id:
                    type: string
                  isArrived: 
                    type: boolean
                    enum:
                      - true
                  
    DeletePrenotazione:
      description: ""
      content:
        application/json:
          schema:
            type: object
            required:
              - message
              - deletedPrenotazione
            properties:
              message:
                type: string
              deletedPrenotazione:
                type: object
                required:
                  - _id
                  - parcheggioId
                  - utenteMail
                  - dataPrenotazione
                  - tipoPosto
                  - veicolo
                properties:
                  _id:
                    type: string
                  parcheggioId:
                    type: string
                  utenteMail:
                    type: string
                  dataPrenotazione:
                    type: string
                  tipoPosto:
                    type: string
                  veicolo:
                    type: object
                    required:
                      - tipoVeicolo
                      - targa
                    properties:
                      tipoVeicolo:
                        type: string
                      targa:
                        type: string
    GetPrenotazioneParcheggio:
      description: ""
      content:
        application/json:
          schema:
            type: object
            required:
              - count
              - prenotazioni
            properties:
              count:
                type: string
              prenotazioni:
                type: array
                items:
                  type: object
                  required:
                    - _id
                    - parcheggioId
                    - utenteMail
                    - dataPrenotazione
                    - tipoPosto
                    - veicolo
                    - isArrived
                  properties:
                    _id:
                      type: string
                    parcheggioId: 
                      type: string
                    utenteMail:
                      type: string
                    dataPrenotazione:
                      type: string
                    tipoPosto:
                      type: string
                    veicolo:
                      type: object
                      required:
                        - tipoVeicolo
                        - targa
                      properties:
                        tipoVeicolo:
                          type: string
                        targa:
                          type: string
                    isArrived:
                      type: boolean
                  
    PostPrenotazioneParcheggio:
      description: ""
      content:
        application/json:
          schema:
            type: object
            required:
              - message
              - createdPrenotazione
            properties:
              message:
                type: string
              createdPrenotazione:
                type: object
                required:
                  - _id
                  - parcheggioId
                  - utenteMail
                  - dataPrenotazione
                  - tipoPosto
                  - veicolo
                properties:
                  _id:
                    type: string
                  parcheggioId:
                    type: string
                  utenteMail:
                    type: string
                  dataPrenotazione:
                    type: string
                  tipoPosto:
                    type: string
                  veicolo:
                    type: object
                    required:
                      - tipoVeicolo
                      - targa
                    properties:
                      tipoVeicolo:
                        type: string
                      targa:
                        type: string

    GeneralError:
      description: "Errore generico per cui viene mostrato un messaggio di errore"
      content: 
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorSchema"
          example: 
            error: "Error"
    PostSuccessfulRes:
      description: "Risposta alla POST in caso di successo"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ParcheggioPostResSchema' 
      links:
        GetParcheggioById: 
          $ref: '#/components/links/GetParcheggioById'
    DeleteSuccessfulRes:
      description: Risposta alla DELETE in caso di successo
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ParcheggioDeleteResSchema' 
    PatchSuccessfulRes:
      description: Risposta alla PATCH in caso di successo
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ParcheggioPatchResSchema'
      links:
        GetParcheggioById: 
          $ref: '#/components/links/GetParcheggioById'
    GetAllSuccessfulRes:
      description: Risposta in caso di successo
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetParcheggiResSchema'
      links:
        GetParcheggioById: 
          $ref: '#/components/links/GetParcheggioById'
    GetParcheggioSuccessfulRes:
      description: Risponde con le informazioni del parcheggio cercato in caso di successo
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetParcheggioResSchema'
      links:
        GetParcheggioById:
          $ref: '#/components/links/GetParcheggioById'
    RicercaParcheggiViciniSuccessfulRes:
      description: Risponde con una lista dei parcheggi ordinati dal pi√π vicino al pi√π lontano in caso di successo
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetParcheggiResSchema'
      links:
        GetParcheggioById: 
          $ref: '#/components/links/GetParcheggioById'
    RegistraUtenteRes:
      description: Risponde con un messaggio avvisando la creazione del'utente.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
              - utenteCreato
            properties:
              message:
                type: string
              utenteCreato:
                type: object
                required:
                  - _type
                  - email
                properties:
                  _type:
                    type: string
                    enum:
                    - "UtenteAdmin"
                    - "UtenteNormale"
                  email:
                    type: string
    LoginUtenteRes:
      description: Risponde con un messaggio avvisando l'autenticazione del'utente.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
              - token
              - email
              - _id
              - request
            properties:
              message:
                type: string
              token:
                type: string
              email:
                type: string
              _id:
                type: string
              request:
                type: object
                required:
                  - type
                  - url
                properties:
                  type:
                    type: string
                    enum:
                    - "GET"
                  url:
                    type: string
    FeedbackPostRes:
      description: Risponde con un messaggio di successo e con informazioni sul feedback creato
      content:
        application/json:
          schema:
           type: object
           required:
             - message
             - createdFeedback
           properties:
            message:
              type: string
              enum:
                - "Feedback creato"
            createdFeedback:
              type: object
              required:
                - _id
                - parcheggioId
                - rating
                - testoFeedback
              properties:
                _id:
                  type: string
                parcheggioId:
                  type: string
                rating:
                  type: integer
                testoFeedback:
                  type: string
                  maxLength: 300
    FeedbackGetRes:
      description: Risponde con una lista di feedback e il numero di feedback presenti nella lista
      content:
        application/json:
          schema:
            type: object
            required:
              - count
              - feedback
            properties:
              count: 
                type: integer
              feedback:
                type: array
                items:
                  type: object
                  required:
                    - _id
                    - parcheggioId
                    - utenteMail
                    - rating
                    - testoFeedback
                  properties:
                    _id: 
                      type: string
                    parcheggioId:
                      type: string
                    utenteMail:
                      type: string
                    rating:
                      type: integer
                    testoFeedback:
                      type: string
                      maxLength: 300
              
  links:
    GetParcheggioById:
      operationId: getParcheggioById
      parameters:
        parcheggioId: 'response.body#/_id'
      description: Il valore '_id' ritornato pu√≤ essere usato come 'parcheggioId' in 'GET /parcheggi/{parcheggioId}'